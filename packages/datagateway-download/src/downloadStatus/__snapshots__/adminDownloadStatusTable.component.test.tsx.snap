// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Admin Download Status Table renders correctly 1`] = `
<Styled(ForwardRef(Paper))
  square={true}
>
  <ForwardRef(Grid)
    container={true}
    spacing={1}
  >
    <ForwardRef(Grid)
      aria-label="downloadTab.last_updated_time_arialabel"
      item={true}
      xs={12}
    >
      <ForwardRef(Typography)
        component="h3"
        style={
          Object {
            "alignItems": "center",
            "display": "inline-flex",
            "float": "right",
          }
        }
        variant="subtitle1"
      >
        <BlackTooltip
          enterDelay={500}
          title="Refresh Downloads"
        >
          <ForwardRef(IconButton)
            aria-label="downloadTab.refresh_download_status_arialabel"
            color="secondary"
            onClick={[Function]}
            size="large"
          >
            <Memo(ForwardRef(RefreshIcon)) />
          </ForwardRef(IconButton)>
        </BlackTooltip>
        <p
          style={
            Object {
              "paddingLeft": "10px ",
            }
          }
        >
          <b>
            downloadTab.last_checked
            : 
          </b>
           
          Sat, 01 Feb 2020 00:00:00 GMT
        </p>
      </ForwardRef(Typography)>
    </ForwardRef(Grid)>
    <ForwardRef(Grid)
      item={true}
      xs={true}
    >
      <ForwardRef(Grid)
        container={true}
        direction="column"
      >
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <ForwardRef(LinearProgress)
            color="secondary"
          />
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
        >
          <ForwardRef(Paper)
            style={
              Object {
                "height": "calc(100vh - 64px - 36px - 48px - (3rem * 1.167) - 32px - (1.75rem + 40px))",
                "minHeight": 230,
                "overflowX": "auto",
              }
            }
          >
            <VirtualizedTable
              actions={
                Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                ]
              }
              actionsWidth={100}
              columns={
                Array [
                  Object {
                    "dataKey": "id",
                    "filterComponent": [Function],
                    "label": "downloadStatus.id",
                  },
                  Object {
                    "dataKey": "fullName",
                    "filterComponent": [Function],
                    "label": "downloadStatus.fullname",
                  },
                  Object {
                    "dataKey": "userName",
                    "filterComponent": [Function],
                    "label": "downloadStatus.username",
                  },
                  Object {
                    "dataKey": "preparedId",
                    "filterComponent": [Function],
                    "label": "downloadStatus.preparedId",
                  },
                  Object {
                    "dataKey": "transport",
                    "filterComponent": [Function],
                    "label": "downloadStatus.transport",
                  },
                  Object {
                    "dataKey": "status",
                    "filterComponent": [Function],
                    "label": "downloadStatus.status",
                  },
                  Object {
                    "cellContentRenderer": [Function],
                    "dataKey": "size",
                    "disableSort": true,
                    "label": "downloadStatus.size",
                  },
                  Object {
                    "cellContentRenderer": [Function],
                    "dataKey": "createdAt",
                    "filterComponent": [Function],
                    "label": "downloadStatus.createdAt",
                  },
                  Object {
                    "dataKey": "isDeleted",
                    "label": "downloadStatus.deleted",
                  },
                ]
              }
              data={Array []}
              loadMoreRows={[Function]}
              loading={true}
              onSort={[Function]}
              sort={
                Object {
                  "createdAt": "desc",
                }
              }
              totalRowCount={9007199254740991}
            />
          </ForwardRef(Paper)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </ForwardRef(Grid)>
  </ForwardRef(Grid)>
</Styled(ForwardRef(Paper))>
`;
