// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchPageCardView renders correctly when request received 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/search/data",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/search/data",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/search/data",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <QueryClientProvider
        client={
          QueryClient {
            "defaultOptions": Object {},
            "mutationCache": MutationCache {
              "config": Object {},
              "listeners": Array [],
              "mutationId": 0,
              "mutations": Array [],
            },
            "mutationDefaults": Array [],
            "queryCache": QueryCache {
              "config": Object {},
              "listeners": Array [
                [Function],
              ],
              "queries": Array [
                Query {
                  "cache": [Circular],
                  "cacheTime": 300000,
                  "defaultOptions": undefined,
                  "gcTimeout": undefined,
                  "initialState": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                  "observers": Array [
                    InfiniteQueryObserver {
                      "client": [Circular],
                      "currentQuery": [Circular],
                      "currentQueryInitialState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "currentResult": Object {
                        "data": undefined,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdatedAt": 0,
                        "failureCount": 0,
                        "fetchNextPage": [Function],
                        "fetchPreviousPage": [Function],
                        "hasNextPage": undefined,
                        "hasPreviousPage": undefined,
                        "isError": false,
                        "isFetched": false,
                        "isFetchedAfterMount": false,
                        "isFetching": false,
                        "isFetchingNextPage": false,
                        "isFetchingPreviousPage": false,
                        "isIdle": true,
                        "isLoading": false,
                        "isLoadingError": false,
                        "isPlaceholderData": false,
                        "isPreviousData": false,
                        "isRefetchError": false,
                        "isStale": true,
                        "isSuccess": false,
                        "refetch": [Function],
                        "remove": [Function],
                        "status": "idle",
                      },
                      "currentResultOptions": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Investigation",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Investigation",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "InvestigationParameter",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "Sample",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "currentResultState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "fetchNextPage": [Function],
                      "fetchPreviousPage": [Function],
                      "listeners": Array [
                        [Function],
                      ],
                      "options": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Investigation",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Investigation",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "InvestigationParameter",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "Sample",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "previousQueryResult": undefined,
                      "previousSelectError": null,
                      "refetch": [Function],
                      "refetchIntervalId": undefined,
                      "remove": [Function],
                      "staleTimeoutId": undefined,
                      "trackedProps": Array [],
                    },
                    InfiniteQueryObserver {
                      "client": [Circular],
                      "currentQuery": [Circular],
                      "currentQueryInitialState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "currentResult": Object {
                        "data": undefined,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdatedAt": 0,
                        "failureCount": 0,
                        "fetchNextPage": [Function],
                        "fetchPreviousPage": [Function],
                        "hasNextPage": undefined,
                        "hasPreviousPage": undefined,
                        "isError": false,
                        "isFetched": false,
                        "isFetchedAfterMount": false,
                        "isFetching": false,
                        "isFetchingNextPage": false,
                        "isFetchingPreviousPage": false,
                        "isIdle": true,
                        "isLoading": false,
                        "isLoadingError": false,
                        "isPlaceholderData": false,
                        "isPreviousData": false,
                        "isRefetchError": false,
                        "isStale": true,
                        "isSuccess": false,
                        "refetch": [Function],
                        "remove": [Function],
                        "status": "idle",
                      },
                      "currentResultOptions": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Investigation",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Investigation",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "InvestigationParameter",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "Sample",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "currentResultState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "fetchNextPage": [Function],
                      "fetchPreviousPage": [Function],
                      "listeners": Array [
                        [Function],
                      ],
                      "options": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Investigation",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Investigation",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "InvestigationParameter",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "Sample",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "previousQueryResult": undefined,
                      "previousSelectError": null,
                      "refetch": [Function],
                      "refetchIntervalId": undefined,
                      "remove": [Function],
                      "staleTimeoutId": undefined,
                      "trackedProps": Array [],
                    },
                  ],
                  "options": Object {
                    "_defaulted": true,
                    "behavior": Object {
                      "onFetch": [Function],
                    },
                    "enabled": false,
                    "getNextPageParam": [Function],
                    "onError": [Function],
                    "optimisticResults": true,
                    "queryFn": [Function],
                    "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                    "queryKey": Array [
                      "search",
                      "Investigation",
                      Object {
                        "endDate": null,
                        "facets": Array [
                          Object {
                            "target": "Investigation",
                          },
                          Object {
                            "dimensions": Array [
                              Object {
                                "dimension": "type.name",
                              },
                            ],
                            "target": "InvestigationParameter",
                          },
                          Object {
                            "dimensions": Array [
                              Object {
                                "dimension": "type.name",
                              },
                            ],
                            "target": "Sample",
                          },
                        ],
                        "filters": Object {},
                        "maxCount": 100,
                        "minCount": 10,
                        "restrict": true,
                        "searchText": "",
                        "sort": Object {},
                        "startDate": null,
                      },
                    ],
                  },
                  "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                  "queryKey": Array [
                    "search",
                    "Investigation",
                    Object {
                      "endDate": null,
                      "facets": Array [
                        Object {
                          "target": "Investigation",
                        },
                        Object {
                          "dimensions": Array [
                            Object {
                              "dimension": "type.name",
                            },
                          ],
                          "target": "InvestigationParameter",
                        },
                        Object {
                          "dimensions": Array [
                            Object {
                              "dimension": "type.name",
                            },
                          ],
                          "target": "Sample",
                        },
                      ],
                      "filters": Object {},
                      "maxCount": 100,
                      "minCount": 10,
                      "restrict": true,
                      "searchText": "",
                      "sort": Object {},
                      "startDate": null,
                    },
                  ],
                  "state": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                },
                Query {
                  "cache": [Circular],
                  "cacheTime": 300000,
                  "defaultOptions": undefined,
                  "gcTimeout": undefined,
                  "initialState": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                  "observers": Array [
                    InfiniteQueryObserver {
                      "client": [Circular],
                      "currentQuery": [Circular],
                      "currentQueryInitialState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "currentResult": Object {
                        "data": undefined,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdatedAt": 0,
                        "failureCount": 0,
                        "fetchNextPage": [Function],
                        "fetchPreviousPage": [Function],
                        "hasNextPage": undefined,
                        "hasPreviousPage": undefined,
                        "isError": false,
                        "isFetched": false,
                        "isFetchedAfterMount": false,
                        "isFetching": false,
                        "isFetchingNextPage": false,
                        "isFetchingPreviousPage": false,
                        "isIdle": true,
                        "isLoading": false,
                        "isLoadingError": false,
                        "isPlaceholderData": false,
                        "isPreviousData": false,
                        "isRefetchError": false,
                        "isStale": true,
                        "isSuccess": false,
                        "refetch": [Function],
                        "remove": [Function],
                        "status": "idle",
                      },
                      "currentResultOptions": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Dataset\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Dataset\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Dataset",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Dataset",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "currentResultState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "fetchNextPage": [Function],
                      "fetchPreviousPage": [Function],
                      "listeners": Array [
                        [Function],
                      ],
                      "options": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Dataset\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Dataset\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Dataset",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Dataset",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "previousQueryResult": undefined,
                      "previousSelectError": null,
                      "refetch": [Function],
                      "refetchIntervalId": undefined,
                      "remove": [Function],
                      "staleTimeoutId": undefined,
                      "trackedProps": Array [],
                    },
                  ],
                  "options": Object {
                    "_defaulted": true,
                    "behavior": Object {
                      "onFetch": [Function],
                    },
                    "enabled": false,
                    "getNextPageParam": [Function],
                    "onError": [Function],
                    "optimisticResults": true,
                    "queryFn": [Function],
                    "queryHash": "[\\"search\\",\\"Dataset\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Dataset\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                    "queryKey": Array [
                      "search",
                      "Dataset",
                      Object {
                        "endDate": null,
                        "facets": Array [
                          Object {
                            "target": "Dataset",
                          },
                        ],
                        "filters": Object {},
                        "maxCount": 100,
                        "minCount": 10,
                        "restrict": true,
                        "searchText": "",
                        "sort": Object {},
                        "startDate": null,
                      },
                    ],
                  },
                  "queryHash": "[\\"search\\",\\"Dataset\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Dataset\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                  "queryKey": Array [
                    "search",
                    "Dataset",
                    Object {
                      "endDate": null,
                      "facets": Array [
                        Object {
                          "target": "Dataset",
                        },
                      ],
                      "filters": Object {},
                      "maxCount": 100,
                      "minCount": 10,
                      "restrict": true,
                      "searchText": "",
                      "sort": Object {},
                      "startDate": null,
                    },
                  ],
                  "state": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                },
                Query {
                  "cache": [Circular],
                  "cacheTime": 300000,
                  "defaultOptions": undefined,
                  "gcTimeout": undefined,
                  "initialState": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                  "observers": Array [
                    InfiniteQueryObserver {
                      "client": [Circular],
                      "currentQuery": [Circular],
                      "currentQueryInitialState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "currentResult": Object {
                        "data": undefined,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdatedAt": 0,
                        "failureCount": 0,
                        "fetchNextPage": [Function],
                        "fetchPreviousPage": [Function],
                        "hasNextPage": undefined,
                        "hasPreviousPage": undefined,
                        "isError": false,
                        "isFetched": false,
                        "isFetchedAfterMount": false,
                        "isFetching": false,
                        "isFetchingNextPage": false,
                        "isFetchingPreviousPage": false,
                        "isIdle": true,
                        "isLoading": false,
                        "isLoadingError": false,
                        "isPlaceholderData": false,
                        "isPreviousData": false,
                        "isRefetchError": false,
                        "isStale": true,
                        "isSuccess": false,
                        "refetch": [Function],
                        "remove": [Function],
                        "status": "idle",
                      },
                      "currentResultOptions": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Datafile\\",{\\"endDate\\":null,\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Datafile",
                          Object {
                            "endDate": null,
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "currentResultState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "fetchNextPage": [Function],
                      "fetchPreviousPage": [Function],
                      "listeners": Array [
                        [Function],
                      ],
                      "options": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Datafile\\",{\\"endDate\\":null,\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Datafile",
                          Object {
                            "endDate": null,
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "previousQueryResult": undefined,
                      "previousSelectError": null,
                      "refetch": [Function],
                      "refetchIntervalId": undefined,
                      "remove": [Function],
                      "staleTimeoutId": undefined,
                      "trackedProps": Array [],
                    },
                  ],
                  "options": Object {
                    "_defaulted": true,
                    "behavior": Object {
                      "onFetch": [Function],
                    },
                    "enabled": false,
                    "getNextPageParam": [Function],
                    "onError": [Function],
                    "optimisticResults": true,
                    "queryFn": [Function],
                    "queryHash": "[\\"search\\",\\"Datafile\\",{\\"endDate\\":null,\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                    "queryKey": Array [
                      "search",
                      "Datafile",
                      Object {
                        "endDate": null,
                        "filters": Object {},
                        "maxCount": 100,
                        "minCount": 10,
                        "restrict": true,
                        "searchText": "",
                        "sort": Object {},
                        "startDate": null,
                      },
                    ],
                  },
                  "queryHash": "[\\"search\\",\\"Datafile\\",{\\"endDate\\":null,\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                  "queryKey": Array [
                    "search",
                    "Datafile",
                    Object {
                      "endDate": null,
                      "filters": Object {},
                      "maxCount": 100,
                      "minCount": 10,
                      "restrict": true,
                      "searchText": "",
                      "sort": Object {},
                      "startDate": null,
                    },
                  ],
                  "state": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                },
                Query {
                  "cache": [Circular],
                  "cacheTime": 300000,
                  "defaultOptions": undefined,
                  "gcTimeout": undefined,
                  "initialState": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                  "observers": Array [
                    QueryObserver {
                      "client": [Circular],
                      "currentQuery": [Circular],
                      "currentQueryInitialState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "currentResult": Object {
                        "data": undefined,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdatedAt": 0,
                        "failureCount": 0,
                        "isError": false,
                        "isFetched": false,
                        "isFetchedAfterMount": false,
                        "isFetching": false,
                        "isIdle": true,
                        "isLoading": false,
                        "isLoadingError": false,
                        "isPlaceholderData": false,
                        "isPreviousData": false,
                        "isRefetchError": false,
                        "isStale": true,
                        "isSuccess": false,
                        "refetch": [Function],
                        "remove": [Function],
                        "status": "idle",
                      },
                      "currentResultOptions": Object {
                        "_defaulted": true,
                        "enabled": false,
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"facilityCycle\\"]",
                        "queryKey": "facilityCycle",
                      },
                      "currentResultState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "listeners": Array [
                        [Function],
                      ],
                      "options": Object {
                        "_defaulted": true,
                        "enabled": false,
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"facilityCycle\\"]",
                        "queryKey": "facilityCycle",
                      },
                      "previousQueryResult": undefined,
                      "previousSelectError": null,
                      "refetch": [Function],
                      "refetchIntervalId": undefined,
                      "remove": [Function],
                      "staleTimeoutId": undefined,
                      "trackedProps": Array [],
                    },
                  ],
                  "options": Object {
                    "_defaulted": true,
                    "enabled": false,
                    "onError": [Function],
                    "optimisticResults": true,
                    "queryFn": [Function],
                    "queryHash": "[\\"facilityCycle\\"]",
                    "queryKey": "facilityCycle",
                  },
                  "queryHash": "[\\"facilityCycle\\"]",
                  "queryKey": "facilityCycle",
                  "state": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                },
              ],
              "queriesMap": Object {
                "[\\"facilityCycle\\"]": Query {
                  "cache": [Circular],
                  "cacheTime": 300000,
                  "defaultOptions": undefined,
                  "gcTimeout": undefined,
                  "initialState": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                  "observers": Array [
                    QueryObserver {
                      "client": [Circular],
                      "currentQuery": [Circular],
                      "currentQueryInitialState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "currentResult": Object {
                        "data": undefined,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdatedAt": 0,
                        "failureCount": 0,
                        "isError": false,
                        "isFetched": false,
                        "isFetchedAfterMount": false,
                        "isFetching": false,
                        "isIdle": true,
                        "isLoading": false,
                        "isLoadingError": false,
                        "isPlaceholderData": false,
                        "isPreviousData": false,
                        "isRefetchError": false,
                        "isStale": true,
                        "isSuccess": false,
                        "refetch": [Function],
                        "remove": [Function],
                        "status": "idle",
                      },
                      "currentResultOptions": Object {
                        "_defaulted": true,
                        "enabled": false,
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"facilityCycle\\"]",
                        "queryKey": "facilityCycle",
                      },
                      "currentResultState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "listeners": Array [
                        [Function],
                      ],
                      "options": Object {
                        "_defaulted": true,
                        "enabled": false,
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"facilityCycle\\"]",
                        "queryKey": "facilityCycle",
                      },
                      "previousQueryResult": undefined,
                      "previousSelectError": null,
                      "refetch": [Function],
                      "refetchIntervalId": undefined,
                      "remove": [Function],
                      "staleTimeoutId": undefined,
                      "trackedProps": Array [],
                    },
                  ],
                  "options": Object {
                    "_defaulted": true,
                    "enabled": false,
                    "onError": [Function],
                    "optimisticResults": true,
                    "queryFn": [Function],
                    "queryHash": "[\\"facilityCycle\\"]",
                    "queryKey": "facilityCycle",
                  },
                  "queryHash": "[\\"facilityCycle\\"]",
                  "queryKey": "facilityCycle",
                  "state": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                },
                "[\\"search\\",\\"Datafile\\",{\\"endDate\\":null,\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]": Query {
                  "cache": [Circular],
                  "cacheTime": 300000,
                  "defaultOptions": undefined,
                  "gcTimeout": undefined,
                  "initialState": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                  "observers": Array [
                    InfiniteQueryObserver {
                      "client": [Circular],
                      "currentQuery": [Circular],
                      "currentQueryInitialState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "currentResult": Object {
                        "data": undefined,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdatedAt": 0,
                        "failureCount": 0,
                        "fetchNextPage": [Function],
                        "fetchPreviousPage": [Function],
                        "hasNextPage": undefined,
                        "hasPreviousPage": undefined,
                        "isError": false,
                        "isFetched": false,
                        "isFetchedAfterMount": false,
                        "isFetching": false,
                        "isFetchingNextPage": false,
                        "isFetchingPreviousPage": false,
                        "isIdle": true,
                        "isLoading": false,
                        "isLoadingError": false,
                        "isPlaceholderData": false,
                        "isPreviousData": false,
                        "isRefetchError": false,
                        "isStale": true,
                        "isSuccess": false,
                        "refetch": [Function],
                        "remove": [Function],
                        "status": "idle",
                      },
                      "currentResultOptions": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Datafile\\",{\\"endDate\\":null,\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Datafile",
                          Object {
                            "endDate": null,
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "currentResultState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "fetchNextPage": [Function],
                      "fetchPreviousPage": [Function],
                      "listeners": Array [
                        [Function],
                      ],
                      "options": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Datafile\\",{\\"endDate\\":null,\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Datafile",
                          Object {
                            "endDate": null,
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "previousQueryResult": undefined,
                      "previousSelectError": null,
                      "refetch": [Function],
                      "refetchIntervalId": undefined,
                      "remove": [Function],
                      "staleTimeoutId": undefined,
                      "trackedProps": Array [],
                    },
                  ],
                  "options": Object {
                    "_defaulted": true,
                    "behavior": Object {
                      "onFetch": [Function],
                    },
                    "enabled": false,
                    "getNextPageParam": [Function],
                    "onError": [Function],
                    "optimisticResults": true,
                    "queryFn": [Function],
                    "queryHash": "[\\"search\\",\\"Datafile\\",{\\"endDate\\":null,\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                    "queryKey": Array [
                      "search",
                      "Datafile",
                      Object {
                        "endDate": null,
                        "filters": Object {},
                        "maxCount": 100,
                        "minCount": 10,
                        "restrict": true,
                        "searchText": "",
                        "sort": Object {},
                        "startDate": null,
                      },
                    ],
                  },
                  "queryHash": "[\\"search\\",\\"Datafile\\",{\\"endDate\\":null,\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                  "queryKey": Array [
                    "search",
                    "Datafile",
                    Object {
                      "endDate": null,
                      "filters": Object {},
                      "maxCount": 100,
                      "minCount": 10,
                      "restrict": true,
                      "searchText": "",
                      "sort": Object {},
                      "startDate": null,
                    },
                  ],
                  "state": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                },
                "[\\"search\\",\\"Dataset\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Dataset\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]": Query {
                  "cache": [Circular],
                  "cacheTime": 300000,
                  "defaultOptions": undefined,
                  "gcTimeout": undefined,
                  "initialState": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                  "observers": Array [
                    InfiniteQueryObserver {
                      "client": [Circular],
                      "currentQuery": [Circular],
                      "currentQueryInitialState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "currentResult": Object {
                        "data": undefined,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdatedAt": 0,
                        "failureCount": 0,
                        "fetchNextPage": [Function],
                        "fetchPreviousPage": [Function],
                        "hasNextPage": undefined,
                        "hasPreviousPage": undefined,
                        "isError": false,
                        "isFetched": false,
                        "isFetchedAfterMount": false,
                        "isFetching": false,
                        "isFetchingNextPage": false,
                        "isFetchingPreviousPage": false,
                        "isIdle": true,
                        "isLoading": false,
                        "isLoadingError": false,
                        "isPlaceholderData": false,
                        "isPreviousData": false,
                        "isRefetchError": false,
                        "isStale": true,
                        "isSuccess": false,
                        "refetch": [Function],
                        "remove": [Function],
                        "status": "idle",
                      },
                      "currentResultOptions": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Dataset\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Dataset\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Dataset",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Dataset",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "currentResultState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "fetchNextPage": [Function],
                      "fetchPreviousPage": [Function],
                      "listeners": Array [
                        [Function],
                      ],
                      "options": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Dataset\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Dataset\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Dataset",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Dataset",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "previousQueryResult": undefined,
                      "previousSelectError": null,
                      "refetch": [Function],
                      "refetchIntervalId": undefined,
                      "remove": [Function],
                      "staleTimeoutId": undefined,
                      "trackedProps": Array [],
                    },
                  ],
                  "options": Object {
                    "_defaulted": true,
                    "behavior": Object {
                      "onFetch": [Function],
                    },
                    "enabled": false,
                    "getNextPageParam": [Function],
                    "onError": [Function],
                    "optimisticResults": true,
                    "queryFn": [Function],
                    "queryHash": "[\\"search\\",\\"Dataset\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Dataset\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                    "queryKey": Array [
                      "search",
                      "Dataset",
                      Object {
                        "endDate": null,
                        "facets": Array [
                          Object {
                            "target": "Dataset",
                          },
                        ],
                        "filters": Object {},
                        "maxCount": 100,
                        "minCount": 10,
                        "restrict": true,
                        "searchText": "",
                        "sort": Object {},
                        "startDate": null,
                      },
                    ],
                  },
                  "queryHash": "[\\"search\\",\\"Dataset\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Dataset\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                  "queryKey": Array [
                    "search",
                    "Dataset",
                    Object {
                      "endDate": null,
                      "facets": Array [
                        Object {
                          "target": "Dataset",
                        },
                      ],
                      "filters": Object {},
                      "maxCount": 100,
                      "minCount": 10,
                      "restrict": true,
                      "searchText": "",
                      "sort": Object {},
                      "startDate": null,
                    },
                  ],
                  "state": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                },
                "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]": Query {
                  "cache": [Circular],
                  "cacheTime": 300000,
                  "defaultOptions": undefined,
                  "gcTimeout": undefined,
                  "initialState": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                  "observers": Array [
                    InfiniteQueryObserver {
                      "client": [Circular],
                      "currentQuery": [Circular],
                      "currentQueryInitialState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "currentResult": Object {
                        "data": undefined,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdatedAt": 0,
                        "failureCount": 0,
                        "fetchNextPage": [Function],
                        "fetchPreviousPage": [Function],
                        "hasNextPage": undefined,
                        "hasPreviousPage": undefined,
                        "isError": false,
                        "isFetched": false,
                        "isFetchedAfterMount": false,
                        "isFetching": false,
                        "isFetchingNextPage": false,
                        "isFetchingPreviousPage": false,
                        "isIdle": true,
                        "isLoading": false,
                        "isLoadingError": false,
                        "isPlaceholderData": false,
                        "isPreviousData": false,
                        "isRefetchError": false,
                        "isStale": true,
                        "isSuccess": false,
                        "refetch": [Function],
                        "remove": [Function],
                        "status": "idle",
                      },
                      "currentResultOptions": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Investigation",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Investigation",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "InvestigationParameter",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "Sample",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "currentResultState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "fetchNextPage": [Function],
                      "fetchPreviousPage": [Function],
                      "listeners": Array [
                        [Function],
                      ],
                      "options": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Investigation",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Investigation",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "InvestigationParameter",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "Sample",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "previousQueryResult": undefined,
                      "previousSelectError": null,
                      "refetch": [Function],
                      "refetchIntervalId": undefined,
                      "remove": [Function],
                      "staleTimeoutId": undefined,
                      "trackedProps": Array [],
                    },
                    InfiniteQueryObserver {
                      "client": [Circular],
                      "currentQuery": [Circular],
                      "currentQueryInitialState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "currentResult": Object {
                        "data": undefined,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdatedAt": 0,
                        "failureCount": 0,
                        "fetchNextPage": [Function],
                        "fetchPreviousPage": [Function],
                        "hasNextPage": undefined,
                        "hasPreviousPage": undefined,
                        "isError": false,
                        "isFetched": false,
                        "isFetchedAfterMount": false,
                        "isFetching": false,
                        "isFetchingNextPage": false,
                        "isFetchingPreviousPage": false,
                        "isIdle": true,
                        "isLoading": false,
                        "isLoadingError": false,
                        "isPlaceholderData": false,
                        "isPreviousData": false,
                        "isRefetchError": false,
                        "isStale": true,
                        "isSuccess": false,
                        "refetch": [Function],
                        "remove": [Function],
                        "status": "idle",
                      },
                      "currentResultOptions": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Investigation",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Investigation",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "InvestigationParameter",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "Sample",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "currentResultState": Object {
                        "data": undefined,
                        "dataUpdateCount": 0,
                        "dataUpdatedAt": 0,
                        "error": null,
                        "errorUpdateCount": 0,
                        "errorUpdatedAt": 0,
                        "fetchFailureCount": 0,
                        "fetchMeta": null,
                        "isFetching": false,
                        "isInvalidated": false,
                        "isPaused": false,
                        "status": "idle",
                      },
                      "fetchNextPage": [Function],
                      "fetchPreviousPage": [Function],
                      "listeners": Array [
                        [Function],
                      ],
                      "options": Object {
                        "_defaulted": true,
                        "behavior": Object {
                          "onFetch": [Function],
                        },
                        "enabled": false,
                        "getNextPageParam": [Function],
                        "onError": [Function],
                        "optimisticResults": true,
                        "queryFn": [Function],
                        "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                        "queryKey": Array [
                          "search",
                          "Investigation",
                          Object {
                            "endDate": null,
                            "facets": Array [
                              Object {
                                "target": "Investigation",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "InvestigationParameter",
                              },
                              Object {
                                "dimensions": Array [
                                  Object {
                                    "dimension": "type.name",
                                  },
                                ],
                                "target": "Sample",
                              },
                            ],
                            "filters": Object {},
                            "maxCount": 100,
                            "minCount": 10,
                            "restrict": true,
                            "searchText": "",
                            "sort": Object {},
                            "startDate": null,
                          },
                        ],
                      },
                      "previousQueryResult": undefined,
                      "previousSelectError": null,
                      "refetch": [Function],
                      "refetchIntervalId": undefined,
                      "remove": [Function],
                      "staleTimeoutId": undefined,
                      "trackedProps": Array [],
                    },
                  ],
                  "options": Object {
                    "_defaulted": true,
                    "behavior": Object {
                      "onFetch": [Function],
                    },
                    "enabled": false,
                    "getNextPageParam": [Function],
                    "onError": [Function],
                    "optimisticResults": true,
                    "queryFn": [Function],
                    "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                    "queryKey": Array [
                      "search",
                      "Investigation",
                      Object {
                        "endDate": null,
                        "facets": Array [
                          Object {
                            "target": "Investigation",
                          },
                          Object {
                            "dimensions": Array [
                              Object {
                                "dimension": "type.name",
                              },
                            ],
                            "target": "InvestigationParameter",
                          },
                          Object {
                            "dimensions": Array [
                              Object {
                                "dimension": "type.name",
                              },
                            ],
                            "target": "Sample",
                          },
                        ],
                        "filters": Object {},
                        "maxCount": 100,
                        "minCount": 10,
                        "restrict": true,
                        "searchText": "",
                        "sort": Object {},
                        "startDate": null,
                      },
                    ],
                  },
                  "queryHash": "[\\"search\\",\\"Investigation\\",{\\"endDate\\":null,\\"facets\\":[{\\"target\\":\\"Investigation\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"InvestigationParameter\\"},{\\"dimensions\\":[{\\"dimension\\":\\"type.name\\"}],\\"target\\":\\"Sample\\"}],\\"filters\\":{},\\"maxCount\\":100,\\"minCount\\":10,\\"restrict\\":true,\\"searchText\\":\\"\\",\\"sort\\":{},\\"startDate\\":null}]",
                  "queryKey": Array [
                    "search",
                    "Investigation",
                    Object {
                      "endDate": null,
                      "facets": Array [
                        Object {
                          "target": "Investigation",
                        },
                        Object {
                          "dimensions": Array [
                            Object {
                              "dimension": "type.name",
                            },
                          ],
                          "target": "InvestigationParameter",
                        },
                        Object {
                          "dimensions": Array [
                            Object {
                              "dimension": "type.name",
                            },
                          ],
                          "target": "Sample",
                        },
                      ],
                      "filters": Object {},
                      "maxCount": 100,
                      "minCount": 10,
                      "restrict": true,
                      "searchText": "",
                      "sort": Object {},
                      "startDate": null,
                    },
                  ],
                  "state": Object {
                    "data": undefined,
                    "dataUpdateCount": 0,
                    "dataUpdatedAt": 0,
                    "error": null,
                    "errorUpdateCount": 0,
                    "errorUpdatedAt": 0,
                    "fetchFailureCount": 0,
                    "fetchMeta": null,
                    "isFetching": false,
                    "isInvalidated": false,
                    "isPaused": false,
                    "status": "idle",
                  },
                },
              },
            },
            "queryDefaults": Array [],
            "unsubscribeFocus": [Function],
            "unsubscribeOnline": [Function],
          }
        }
      >
        <Connect(SearchPageCardView)
          cartItems={Array []}
          currentTab="investigation"
          navigateToDownload={[MockFunction]}
          onTabChange={[MockFunction]}
        >
          <SearchPageCardView
            cartItems={Array []}
            currentTab="investigation"
            datafileTab={true}
            datasetTab={true}
            dispatch={[Function]}
            investigationTab={true}
            maxNumResults={100}
            minNumResults={10}
            navigateToDownload={[MockFunction]}
            onTabChange={[MockFunction]}
          >
            <div>
              <WithStyles(ForwardRef(AppBar))
                elevation={0}
                position="static"
              >
                <ForwardRef(AppBar)
                  classes={
                    Object {
                      "colorDefault": "MuiAppBar-colorDefault",
                      "colorInherit": "MuiAppBar-colorInherit",
                      "colorPrimary": "MuiAppBar-colorPrimary",
                      "colorSecondary": "MuiAppBar-colorSecondary",
                      "colorTransparent": "MuiAppBar-colorTransparent",
                      "positionAbsolute": "MuiAppBar-positionAbsolute",
                      "positionFixed": "MuiAppBar-positionFixed",
                      "positionRelative": "MuiAppBar-positionRelative",
                      "positionStatic": "MuiAppBar-positionStatic",
                      "positionSticky": "MuiAppBar-positionSticky",
                      "root": "MuiAppBar-root",
                    }
                  }
                  elevation={0}
                  position="static"
                >
                  <WithStyles(ForwardRef(Paper))
                    className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
                    component="header"
                    elevation={0}
                    square={true}
                  >
                    <ForwardRef(Paper)
                      className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
                      classes={
                        Object {
                          "elevation0": "MuiPaper-elevation0",
                          "elevation1": "MuiPaper-elevation1",
                          "elevation10": "MuiPaper-elevation10",
                          "elevation11": "MuiPaper-elevation11",
                          "elevation12": "MuiPaper-elevation12",
                          "elevation13": "MuiPaper-elevation13",
                          "elevation14": "MuiPaper-elevation14",
                          "elevation15": "MuiPaper-elevation15",
                          "elevation16": "MuiPaper-elevation16",
                          "elevation17": "MuiPaper-elevation17",
                          "elevation18": "MuiPaper-elevation18",
                          "elevation19": "MuiPaper-elevation19",
                          "elevation2": "MuiPaper-elevation2",
                          "elevation20": "MuiPaper-elevation20",
                          "elevation21": "MuiPaper-elevation21",
                          "elevation22": "MuiPaper-elevation22",
                          "elevation23": "MuiPaper-elevation23",
                          "elevation24": "MuiPaper-elevation24",
                          "elevation3": "MuiPaper-elevation3",
                          "elevation4": "MuiPaper-elevation4",
                          "elevation5": "MuiPaper-elevation5",
                          "elevation6": "MuiPaper-elevation6",
                          "elevation7": "MuiPaper-elevation7",
                          "elevation8": "MuiPaper-elevation8",
                          "elevation9": "MuiPaper-elevation9",
                          "outlined": "MuiPaper-outlined",
                          "root": "MuiPaper-root",
                          "rounded": "MuiPaper-rounded",
                        }
                      }
                      component="header"
                      elevation={0}
                      square={true}
                    >
                      <header
                        className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation0"
                      >
                        <WithStyles(Styled(MuiBox))
                          boxSizing="border-box"
                          display="flex"
                          flexDirection="row"
                          height="100%"
                          justifyContent="flex-end"
                        >
                          <Styled(MuiBox)
                            boxSizing="border-box"
                            classes={
                              Object {
                                "root": "Styled(MuiBox)-root-1",
                              }
                            }
                            display="flex"
                            flexDirection="row"
                            height="100%"
                            justifyContent="flex-end"
                          >
                            <div
                              className="MuiBox-root MuiBox-root-2 Styled(MuiBox)-root-1"
                              classes={
                                Object {
                                  "root": "Styled(MuiBox)-root-1",
                                }
                              }
                            >
                              <WithStyles(WithStyles(ForwardRef(Tabs)))
                                aria-label="searchPageCardView.tabs_arialabel"
                                className="tour-search-tab-select"
                                onChange={[Function]}
                                value="investigation"
                              >
                                <WithStyles(ForwardRef(Tabs))
                                  aria-label="searchPageCardView.tabs_arialabel"
                                  className="tour-search-tab-select"
                                  classes={
                                    Object {
                                      "indicator": "WithStyles(ForwardRef(Tabs))-indicator-4",
                                      "root": "WithStyles(ForwardRef(Tabs))-root-3",
                                    }
                                  }
                                  onChange={[Function]}
                                  value="investigation"
                                >
                                  <ForwardRef(Tabs)
                                    aria-label="searchPageCardView.tabs_arialabel"
                                    className="tour-search-tab-select"
                                    classes={
                                      Object {
                                        "centered": "MuiTabs-centered",
                                        "fixed": "MuiTabs-fixed",
                                        "flexContainer": "MuiTabs-flexContainer",
                                        "flexContainerVertical": "MuiTabs-flexContainerVertical",
                                        "indicator": "MuiTabs-indicator WithStyles(ForwardRef(Tabs))-indicator-4",
                                        "root": "MuiTabs-root WithStyles(ForwardRef(Tabs))-root-3",
                                        "scrollButtons": "MuiTabs-scrollButtons",
                                        "scrollButtonsDesktop": "MuiTabs-scrollButtonsDesktop",
                                        "scrollable": "MuiTabs-scrollable",
                                        "scroller": "MuiTabs-scroller",
                                        "vertical": "MuiTabs-vertical",
                                      }
                                    }
                                    onChange={[Function]}
                                    value="investigation"
                                  >
                                    <div
                                      className="MuiTabs-root WithStyles(ForwardRef(Tabs))-root-3 tour-search-tab-select"
                                    >
                                      <div
                                        className="MuiTabs-scroller MuiTabs-fixed"
                                        onScroll={[Function]}
                                        style={
                                          Object {
                                            "marginBottom": null,
                                            "overflow": "hidden",
                                          }
                                        }
                                      >
                                        <div
                                          aria-label="searchPageCardView.tabs_arialabel"
                                          className="MuiTabs-flexContainer"
                                          onKeyDown={[Function]}
                                          role="tablist"
                                        >
                                          <WithStyles(ForwardRef(Tab))
                                            aria-controls="simple-tabpanel-investigation"
                                            fullWidth={false}
                                            id="simple-tab-investigation"
                                            indicator={false}
                                            key=".0"
                                            label={
                                              <WithStyles(WithStyles(ForwardRef(Badge)))
                                                badgeContent="?"
                                                id="investigation-badge"
                                                max={999}
                                                showZero={true}
                                              >
                                                <span
                                                  style={
                                                    Object {
                                                      "fontSize": "16px",
                                                      "fontWeight": "bold",
                                                      "marginLeft": "calc(-0.5 * 1ch - 6px)",
                                                      "marginRight": "calc(0.5 * 1ch + 6px)",
                                                      "paddingRight": "1ch",
                                                    }
                                                  }
                                                >
                                                  tabs.investigation
                                                </span>
                                              </WithStyles(WithStyles(ForwardRef(Badge)))>
                                            }
                                            onChange={[Function]}
                                            selected={true}
                                            textColor="inherit"
                                            value="investigation"
                                          >
                                            <ForwardRef(Tab)
                                              aria-controls="simple-tabpanel-investigation"
                                              classes={
                                                Object {
                                                  "disabled": "Mui-disabled",
                                                  "fullWidth": "MuiTab-fullWidth",
                                                  "labelIcon": "MuiTab-labelIcon",
                                                  "root": "MuiTab-root",
                                                  "selected": "Mui-selected",
                                                  "textColorInherit": "MuiTab-textColorInherit",
                                                  "textColorPrimary": "MuiTab-textColorPrimary",
                                                  "textColorSecondary": "MuiTab-textColorSecondary",
                                                  "wrapped": "MuiTab-wrapped",
                                                  "wrapper": "MuiTab-wrapper",
                                                }
                                              }
                                              fullWidth={false}
                                              id="simple-tab-investigation"
                                              indicator={false}
                                              label={
                                                <WithStyles(WithStyles(ForwardRef(Badge)))
                                                  badgeContent="?"
                                                  id="investigation-badge"
                                                  max={999}
                                                  showZero={true}
                                                >
                                                  <span
                                                    style={
                                                      Object {
                                                        "fontSize": "16px",
                                                        "fontWeight": "bold",
                                                        "marginLeft": "calc(-0.5 * 1ch - 6px)",
                                                        "marginRight": "calc(0.5 * 1ch + 6px)",
                                                        "paddingRight": "1ch",
                                                      }
                                                    }
                                                  >
                                                    tabs.investigation
                                                  </span>
                                                </WithStyles(WithStyles(ForwardRef(Badge)))>
                                              }
                                              onChange={[Function]}
                                              selected={true}
                                              textColor="inherit"
                                              value="investigation"
                                            >
                                              <WithStyles(ForwardRef(ButtonBase))
                                                aria-controls="simple-tabpanel-investigation"
                                                aria-selected={true}
                                                className="MuiTab-root MuiTab-textColorInherit Mui-selected"
                                                disabled={false}
                                                focusRipple={true}
                                                id="simple-tab-investigation"
                                                onClick={[Function]}
                                                onFocus={[Function]}
                                                role="tab"
                                                tabIndex={0}
                                              >
                                                <ForwardRef(ButtonBase)
                                                  aria-controls="simple-tabpanel-investigation"
                                                  aria-selected={true}
                                                  className="MuiTab-root MuiTab-textColorInherit Mui-selected"
                                                  classes={
                                                    Object {
                                                      "disabled": "Mui-disabled",
                                                      "focusVisible": "Mui-focusVisible",
                                                      "root": "MuiButtonBase-root",
                                                    }
                                                  }
                                                  disabled={false}
                                                  focusRipple={true}
                                                  id="simple-tab-investigation"
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  role="tab"
                                                  tabIndex={0}
                                                >
                                                  <button
                                                    aria-controls="simple-tabpanel-investigation"
                                                    aria-selected={true}
                                                    className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit Mui-selected"
                                                    disabled={false}
                                                    id="simple-tab-investigation"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onDragLeave={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseLeave={[Function]}
                                                    onMouseUp={[Function]}
                                                    onTouchEnd={[Function]}
                                                    onTouchMove={[Function]}
                                                    onTouchStart={[Function]}
                                                    role="tab"
                                                    tabIndex={0}
                                                    type="button"
                                                  >
                                                    <span
                                                      className="MuiTab-wrapper"
                                                    >
                                                      <WithStyles(WithStyles(ForwardRef(Badge)))
                                                        badgeContent="?"
                                                        id="investigation-badge"
                                                        max={999}
                                                        showZero={true}
                                                      >
                                                        <WithStyles(ForwardRef(Badge))
                                                          badgeContent="?"
                                                          classes={
                                                            Object {
                                                              "badge": "WithStyles(ForwardRef(Badge))-badge-5",
                                                            }
                                                          }
                                                          id="investigation-badge"
                                                          max={999}
                                                          showZero={true}
                                                        >
                                                          <ForwardRef(Badge)
                                                            badgeContent="?"
                                                            classes={
                                                              Object {
                                                                "anchorOriginBottomLeftCircle": "MuiBadge-anchorOriginBottomLeftCircle",
                                                                "anchorOriginBottomLeftRectangle": "MuiBadge-anchorOriginBottomLeftRectangle",
                                                                "anchorOriginBottomRightCircle": "MuiBadge-anchorOriginBottomRightCircle",
                                                                "anchorOriginBottomRightRectangle": "MuiBadge-anchorOriginBottomRightRectangle",
                                                                "anchorOriginTopLeftCircle": "MuiBadge-anchorOriginTopLeftCircle",
                                                                "anchorOriginTopLeftRectangle": "MuiBadge-anchorOriginTopLeftRectangle",
                                                                "anchorOriginTopRightCircle": "MuiBadge-anchorOriginTopRightCircle",
                                                                "anchorOriginTopRightRectangle": "MuiBadge-anchorOriginTopRightRectangle",
                                                                "badge": "MuiBadge-badge WithStyles(ForwardRef(Badge))-badge-5",
                                                                "colorError": "MuiBadge-colorError",
                                                                "colorPrimary": "MuiBadge-colorPrimary",
                                                                "colorSecondary": "MuiBadge-colorSecondary",
                                                                "dot": "MuiBadge-dot",
                                                                "invisible": "MuiBadge-invisible",
                                                                "root": "MuiBadge-root",
                                                              }
                                                            }
                                                            id="investigation-badge"
                                                            max={999}
                                                            showZero={true}
                                                          >
                                                            <span
                                                              className="MuiBadge-root"
                                                              id="investigation-badge"
                                                            >
                                                              <span
                                                                style={
                                                                  Object {
                                                                    "fontSize": "16px",
                                                                    "fontWeight": "bold",
                                                                    "marginLeft": "calc(-0.5 * 1ch - 6px)",
                                                                    "marginRight": "calc(0.5 * 1ch + 6px)",
                                                                    "paddingRight": "1ch",
                                                                  }
                                                                }
                                                              >
                                                                tabs.investigation
                                                              </span>
                                                              <span
                                                                className="MuiBadge-badge WithStyles(ForwardRef(Badge))-badge-5 MuiBadge-anchorOriginTopRightRectangle"
                                                              >
                                                                ?
                                                              </span>
                                                            </span>
                                                          </ForwardRef(Badge)>
                                                        </WithStyles(ForwardRef(Badge))>
                                                      </WithStyles(WithStyles(ForwardRef(Badge)))>
                                                    </span>
                                                    <WithStyles(memo)
                                                      center={false}
                                                    >
                                                      <ForwardRef(TouchRipple)
                                                        center={false}
                                                        classes={
                                                          Object {
                                                            "child": "MuiTouchRipple-child",
                                                            "childLeaving": "MuiTouchRipple-childLeaving",
                                                            "childPulsate": "MuiTouchRipple-childPulsate",
                                                            "ripple": "MuiTouchRipple-ripple",
                                                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                            "root": "MuiTouchRipple-root",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          className="MuiTouchRipple-root"
                                                        >
                                                          <TransitionGroup
                                                            childFactory={[Function]}
                                                            component={null}
                                                            exit={true}
                                                          />
                                                        </span>
                                                      </ForwardRef(TouchRipple)>
                                                    </WithStyles(memo)>
                                                  </button>
                                                </ForwardRef(ButtonBase)>
                                              </WithStyles(ForwardRef(ButtonBase))>
                                            </ForwardRef(Tab)>
                                          </WithStyles(ForwardRef(Tab))>
                                          <WithStyles(ForwardRef(Tab))
                                            aria-controls="simple-tabpanel-dataset"
                                            fullWidth={false}
                                            id="simple-tab-dataset"
                                            indicator={false}
                                            key=".1"
                                            label={
                                              <WithStyles(WithStyles(ForwardRef(Badge)))
                                                badgeContent="?"
                                                id="dataset-badge"
                                                max={999}
                                                showZero={true}
                                              >
                                                <span
                                                  style={
                                                    Object {
                                                      "fontSize": "16px",
                                                      "fontWeight": "bold",
                                                      "marginLeft": "calc(-0.5 * 1ch - 6px)",
                                                      "marginRight": "calc(0.5 * 1ch + 6px)",
                                                      "paddingRight": "1ch",
                                                    }
                                                  }
                                                >
                                                  tabs.dataset
                                                </span>
                                              </WithStyles(WithStyles(ForwardRef(Badge)))>
                                            }
                                            onChange={[Function]}
                                            selected={false}
                                            textColor="inherit"
                                            value="dataset"
                                          >
                                            <ForwardRef(Tab)
                                              aria-controls="simple-tabpanel-dataset"
                                              classes={
                                                Object {
                                                  "disabled": "Mui-disabled",
                                                  "fullWidth": "MuiTab-fullWidth",
                                                  "labelIcon": "MuiTab-labelIcon",
                                                  "root": "MuiTab-root",
                                                  "selected": "Mui-selected",
                                                  "textColorInherit": "MuiTab-textColorInherit",
                                                  "textColorPrimary": "MuiTab-textColorPrimary",
                                                  "textColorSecondary": "MuiTab-textColorSecondary",
                                                  "wrapped": "MuiTab-wrapped",
                                                  "wrapper": "MuiTab-wrapper",
                                                }
                                              }
                                              fullWidth={false}
                                              id="simple-tab-dataset"
                                              indicator={false}
                                              label={
                                                <WithStyles(WithStyles(ForwardRef(Badge)))
                                                  badgeContent="?"
                                                  id="dataset-badge"
                                                  max={999}
                                                  showZero={true}
                                                >
                                                  <span
                                                    style={
                                                      Object {
                                                        "fontSize": "16px",
                                                        "fontWeight": "bold",
                                                        "marginLeft": "calc(-0.5 * 1ch - 6px)",
                                                        "marginRight": "calc(0.5 * 1ch + 6px)",
                                                        "paddingRight": "1ch",
                                                      }
                                                    }
                                                  >
                                                    tabs.dataset
                                                  </span>
                                                </WithStyles(WithStyles(ForwardRef(Badge)))>
                                              }
                                              onChange={[Function]}
                                              selected={false}
                                              textColor="inherit"
                                              value="dataset"
                                            >
                                              <WithStyles(ForwardRef(ButtonBase))
                                                aria-controls="simple-tabpanel-dataset"
                                                aria-selected={false}
                                                className="MuiTab-root MuiTab-textColorInherit"
                                                disabled={false}
                                                focusRipple={true}
                                                id="simple-tab-dataset"
                                                onClick={[Function]}
                                                onFocus={[Function]}
                                                role="tab"
                                                tabIndex={-1}
                                              >
                                                <ForwardRef(ButtonBase)
                                                  aria-controls="simple-tabpanel-dataset"
                                                  aria-selected={false}
                                                  className="MuiTab-root MuiTab-textColorInherit"
                                                  classes={
                                                    Object {
                                                      "disabled": "Mui-disabled",
                                                      "focusVisible": "Mui-focusVisible",
                                                      "root": "MuiButtonBase-root",
                                                    }
                                                  }
                                                  disabled={false}
                                                  focusRipple={true}
                                                  id="simple-tab-dataset"
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  role="tab"
                                                  tabIndex={-1}
                                                >
                                                  <button
                                                    aria-controls="simple-tabpanel-dataset"
                                                    aria-selected={false}
                                                    className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit"
                                                    disabled={false}
                                                    id="simple-tab-dataset"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onDragLeave={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseLeave={[Function]}
                                                    onMouseUp={[Function]}
                                                    onTouchEnd={[Function]}
                                                    onTouchMove={[Function]}
                                                    onTouchStart={[Function]}
                                                    role="tab"
                                                    tabIndex={-1}
                                                    type="button"
                                                  >
                                                    <span
                                                      className="MuiTab-wrapper"
                                                    >
                                                      <WithStyles(WithStyles(ForwardRef(Badge)))
                                                        badgeContent="?"
                                                        id="dataset-badge"
                                                        max={999}
                                                        showZero={true}
                                                      >
                                                        <WithStyles(ForwardRef(Badge))
                                                          badgeContent="?"
                                                          classes={
                                                            Object {
                                                              "badge": "WithStyles(ForwardRef(Badge))-badge-5",
                                                            }
                                                          }
                                                          id="dataset-badge"
                                                          max={999}
                                                          showZero={true}
                                                        >
                                                          <ForwardRef(Badge)
                                                            badgeContent="?"
                                                            classes={
                                                              Object {
                                                                "anchorOriginBottomLeftCircle": "MuiBadge-anchorOriginBottomLeftCircle",
                                                                "anchorOriginBottomLeftRectangle": "MuiBadge-anchorOriginBottomLeftRectangle",
                                                                "anchorOriginBottomRightCircle": "MuiBadge-anchorOriginBottomRightCircle",
                                                                "anchorOriginBottomRightRectangle": "MuiBadge-anchorOriginBottomRightRectangle",
                                                                "anchorOriginTopLeftCircle": "MuiBadge-anchorOriginTopLeftCircle",
                                                                "anchorOriginTopLeftRectangle": "MuiBadge-anchorOriginTopLeftRectangle",
                                                                "anchorOriginTopRightCircle": "MuiBadge-anchorOriginTopRightCircle",
                                                                "anchorOriginTopRightRectangle": "MuiBadge-anchorOriginTopRightRectangle",
                                                                "badge": "MuiBadge-badge WithStyles(ForwardRef(Badge))-badge-5",
                                                                "colorError": "MuiBadge-colorError",
                                                                "colorPrimary": "MuiBadge-colorPrimary",
                                                                "colorSecondary": "MuiBadge-colorSecondary",
                                                                "dot": "MuiBadge-dot",
                                                                "invisible": "MuiBadge-invisible",
                                                                "root": "MuiBadge-root",
                                                              }
                                                            }
                                                            id="dataset-badge"
                                                            max={999}
                                                            showZero={true}
                                                          >
                                                            <span
                                                              className="MuiBadge-root"
                                                              id="dataset-badge"
                                                            >
                                                              <span
                                                                style={
                                                                  Object {
                                                                    "fontSize": "16px",
                                                                    "fontWeight": "bold",
                                                                    "marginLeft": "calc(-0.5 * 1ch - 6px)",
                                                                    "marginRight": "calc(0.5 * 1ch + 6px)",
                                                                    "paddingRight": "1ch",
                                                                  }
                                                                }
                                                              >
                                                                tabs.dataset
                                                              </span>
                                                              <span
                                                                className="MuiBadge-badge WithStyles(ForwardRef(Badge))-badge-5 MuiBadge-anchorOriginTopRightRectangle"
                                                              >
                                                                ?
                                                              </span>
                                                            </span>
                                                          </ForwardRef(Badge)>
                                                        </WithStyles(ForwardRef(Badge))>
                                                      </WithStyles(WithStyles(ForwardRef(Badge)))>
                                                    </span>
                                                    <WithStyles(memo)
                                                      center={false}
                                                    >
                                                      <ForwardRef(TouchRipple)
                                                        center={false}
                                                        classes={
                                                          Object {
                                                            "child": "MuiTouchRipple-child",
                                                            "childLeaving": "MuiTouchRipple-childLeaving",
                                                            "childPulsate": "MuiTouchRipple-childPulsate",
                                                            "ripple": "MuiTouchRipple-ripple",
                                                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                            "root": "MuiTouchRipple-root",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          className="MuiTouchRipple-root"
                                                        >
                                                          <TransitionGroup
                                                            childFactory={[Function]}
                                                            component={null}
                                                            exit={true}
                                                          />
                                                        </span>
                                                      </ForwardRef(TouchRipple)>
                                                    </WithStyles(memo)>
                                                  </button>
                                                </ForwardRef(ButtonBase)>
                                              </WithStyles(ForwardRef(ButtonBase))>
                                            </ForwardRef(Tab)>
                                          </WithStyles(ForwardRef(Tab))>
                                          <WithStyles(ForwardRef(Tab))
                                            aria-controls="simple-tabpanel-datafile"
                                            fullWidth={false}
                                            id="simple-tab-datafile"
                                            indicator={false}
                                            key=".2"
                                            label={
                                              <WithStyles(WithStyles(ForwardRef(Badge)))
                                                badgeContent="?"
                                                id="datafile-badge"
                                                max={999}
                                                showZero={true}
                                              >
                                                <span
                                                  style={
                                                    Object {
                                                      "fontSize": "16px",
                                                      "fontWeight": "bold",
                                                      "marginLeft": "calc(-0.5 * 1ch - 6px)",
                                                      "marginRight": "calc(0.5 * 1ch + 6px)",
                                                      "paddingRight": "1ch",
                                                    }
                                                  }
                                                >
                                                  tabs.datafile
                                                </span>
                                              </WithStyles(WithStyles(ForwardRef(Badge)))>
                                            }
                                            onChange={[Function]}
                                            selected={false}
                                            textColor="inherit"
                                            value="datafile"
                                          >
                                            <ForwardRef(Tab)
                                              aria-controls="simple-tabpanel-datafile"
                                              classes={
                                                Object {
                                                  "disabled": "Mui-disabled",
                                                  "fullWidth": "MuiTab-fullWidth",
                                                  "labelIcon": "MuiTab-labelIcon",
                                                  "root": "MuiTab-root",
                                                  "selected": "Mui-selected",
                                                  "textColorInherit": "MuiTab-textColorInherit",
                                                  "textColorPrimary": "MuiTab-textColorPrimary",
                                                  "textColorSecondary": "MuiTab-textColorSecondary",
                                                  "wrapped": "MuiTab-wrapped",
                                                  "wrapper": "MuiTab-wrapper",
                                                }
                                              }
                                              fullWidth={false}
                                              id="simple-tab-datafile"
                                              indicator={false}
                                              label={
                                                <WithStyles(WithStyles(ForwardRef(Badge)))
                                                  badgeContent="?"
                                                  id="datafile-badge"
                                                  max={999}
                                                  showZero={true}
                                                >
                                                  <span
                                                    style={
                                                      Object {
                                                        "fontSize": "16px",
                                                        "fontWeight": "bold",
                                                        "marginLeft": "calc(-0.5 * 1ch - 6px)",
                                                        "marginRight": "calc(0.5 * 1ch + 6px)",
                                                        "paddingRight": "1ch",
                                                      }
                                                    }
                                                  >
                                                    tabs.datafile
                                                  </span>
                                                </WithStyles(WithStyles(ForwardRef(Badge)))>
                                              }
                                              onChange={[Function]}
                                              selected={false}
                                              textColor="inherit"
                                              value="datafile"
                                            >
                                              <WithStyles(ForwardRef(ButtonBase))
                                                aria-controls="simple-tabpanel-datafile"
                                                aria-selected={false}
                                                className="MuiTab-root MuiTab-textColorInherit"
                                                disabled={false}
                                                focusRipple={true}
                                                id="simple-tab-datafile"
                                                onClick={[Function]}
                                                onFocus={[Function]}
                                                role="tab"
                                                tabIndex={-1}
                                              >
                                                <ForwardRef(ButtonBase)
                                                  aria-controls="simple-tabpanel-datafile"
                                                  aria-selected={false}
                                                  className="MuiTab-root MuiTab-textColorInherit"
                                                  classes={
                                                    Object {
                                                      "disabled": "Mui-disabled",
                                                      "focusVisible": "Mui-focusVisible",
                                                      "root": "MuiButtonBase-root",
                                                    }
                                                  }
                                                  disabled={false}
                                                  focusRipple={true}
                                                  id="simple-tab-datafile"
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  role="tab"
                                                  tabIndex={-1}
                                                >
                                                  <button
                                                    aria-controls="simple-tabpanel-datafile"
                                                    aria-selected={false}
                                                    className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit"
                                                    disabled={false}
                                                    id="simple-tab-datafile"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onDragLeave={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseLeave={[Function]}
                                                    onMouseUp={[Function]}
                                                    onTouchEnd={[Function]}
                                                    onTouchMove={[Function]}
                                                    onTouchStart={[Function]}
                                                    role="tab"
                                                    tabIndex={-1}
                                                    type="button"
                                                  >
                                                    <span
                                                      className="MuiTab-wrapper"
                                                    >
                                                      <WithStyles(WithStyles(ForwardRef(Badge)))
                                                        badgeContent="?"
                                                        id="datafile-badge"
                                                        max={999}
                                                        showZero={true}
                                                      >
                                                        <WithStyles(ForwardRef(Badge))
                                                          badgeContent="?"
                                                          classes={
                                                            Object {
                                                              "badge": "WithStyles(ForwardRef(Badge))-badge-5",
                                                            }
                                                          }
                                                          id="datafile-badge"
                                                          max={999}
                                                          showZero={true}
                                                        >
                                                          <ForwardRef(Badge)
                                                            badgeContent="?"
                                                            classes={
                                                              Object {
                                                                "anchorOriginBottomLeftCircle": "MuiBadge-anchorOriginBottomLeftCircle",
                                                                "anchorOriginBottomLeftRectangle": "MuiBadge-anchorOriginBottomLeftRectangle",
                                                                "anchorOriginBottomRightCircle": "MuiBadge-anchorOriginBottomRightCircle",
                                                                "anchorOriginBottomRightRectangle": "MuiBadge-anchorOriginBottomRightRectangle",
                                                                "anchorOriginTopLeftCircle": "MuiBadge-anchorOriginTopLeftCircle",
                                                                "anchorOriginTopLeftRectangle": "MuiBadge-anchorOriginTopLeftRectangle",
                                                                "anchorOriginTopRightCircle": "MuiBadge-anchorOriginTopRightCircle",
                                                                "anchorOriginTopRightRectangle": "MuiBadge-anchorOriginTopRightRectangle",
                                                                "badge": "MuiBadge-badge WithStyles(ForwardRef(Badge))-badge-5",
                                                                "colorError": "MuiBadge-colorError",
                                                                "colorPrimary": "MuiBadge-colorPrimary",
                                                                "colorSecondary": "MuiBadge-colorSecondary",
                                                                "dot": "MuiBadge-dot",
                                                                "invisible": "MuiBadge-invisible",
                                                                "root": "MuiBadge-root",
                                                              }
                                                            }
                                                            id="datafile-badge"
                                                            max={999}
                                                            showZero={true}
                                                          >
                                                            <span
                                                              className="MuiBadge-root"
                                                              id="datafile-badge"
                                                            >
                                                              <span
                                                                style={
                                                                  Object {
                                                                    "fontSize": "16px",
                                                                    "fontWeight": "bold",
                                                                    "marginLeft": "calc(-0.5 * 1ch - 6px)",
                                                                    "marginRight": "calc(0.5 * 1ch + 6px)",
                                                                    "paddingRight": "1ch",
                                                                  }
                                                                }
                                                              >
                                                                tabs.datafile
                                                              </span>
                                                              <span
                                                                className="MuiBadge-badge WithStyles(ForwardRef(Badge))-badge-5 MuiBadge-anchorOriginTopRightRectangle"
                                                              >
                                                                ?
                                                              </span>
                                                            </span>
                                                          </ForwardRef(Badge)>
                                                        </WithStyles(ForwardRef(Badge))>
                                                      </WithStyles(WithStyles(ForwardRef(Badge)))>
                                                    </span>
                                                    <WithStyles(memo)
                                                      center={false}
                                                    >
                                                      <ForwardRef(TouchRipple)
                                                        center={false}
                                                        classes={
                                                          Object {
                                                            "child": "MuiTouchRipple-child",
                                                            "childLeaving": "MuiTouchRipple-childLeaving",
                                                            "childPulsate": "MuiTouchRipple-childPulsate",
                                                            "ripple": "MuiTouchRipple-ripple",
                                                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                            "root": "MuiTouchRipple-root",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          className="MuiTouchRipple-root"
                                                        >
                                                          <TransitionGroup
                                                            childFactory={[Function]}
                                                            component={null}
                                                            exit={true}
                                                          />
                                                        </span>
                                                      </ForwardRef(TouchRipple)>
                                                    </WithStyles(memo)>
                                                  </button>
                                                </ForwardRef(ButtonBase)>
                                              </WithStyles(ForwardRef(ButtonBase))>
                                            </ForwardRef(Tab)>
                                          </WithStyles(ForwardRef(Tab))>
                                        </div>
                                        <WithStyles(ForwardRef(TabIndicator))
                                          className="MuiTabs-indicator WithStyles(ForwardRef(Tabs))-indicator-4"
                                          color="secondary"
                                          orientation="horizontal"
                                          style={
                                            Object {
                                              "left": 0,
                                              "width": 0,
                                            }
                                          }
                                        >
                                          <ForwardRef(TabIndicator)
                                            className="MuiTabs-indicator WithStyles(ForwardRef(Tabs))-indicator-4"
                                            classes={
                                              Object {
                                                "colorPrimary": "PrivateTabIndicator-colorPrimary-7",
                                                "colorSecondary": "PrivateTabIndicator-colorSecondary-8",
                                                "root": "PrivateTabIndicator-root-6",
                                                "vertical": "PrivateTabIndicator-vertical-9",
                                              }
                                            }
                                            color="secondary"
                                            orientation="horizontal"
                                            style={
                                              Object {
                                                "left": 0,
                                                "width": 0,
                                              }
                                            }
                                          >
                                            <span
                                              className="PrivateTabIndicator-root-6 PrivateTabIndicator-colorSecondary-8 MuiTabs-indicator WithStyles(ForwardRef(Tabs))-indicator-4"
                                              style={
                                                Object {
                                                  "left": 0,
                                                  "width": 0,
                                                }
                                              }
                                            />
                                          </ForwardRef(TabIndicator)>
                                        </WithStyles(ForwardRef(TabIndicator))>
                                      </div>
                                    </div>
                                  </ForwardRef(Tabs)>
                                </WithStyles(ForwardRef(Tabs))>
                              </WithStyles(WithStyles(ForwardRef(Tabs)))>
                              <WithStyles(Styled(MuiBox))
                                marginLeft="auto"
                              >
                                <Styled(MuiBox)
                                  classes={
                                    Object {
                                      "root": "Styled(MuiBox)-root-1",
                                    }
                                  }
                                  marginLeft="auto"
                                >
                                  <div
                                    className="MuiBox-root MuiBox-root-10 Styled(MuiBox)-root-1"
                                    classes={
                                      Object {
                                        "root": "Styled(MuiBox)-root-1",
                                      }
                                    }
                                  >
                                    <ViewCartButton
                                      cartItems={Array []}
                                      navigateToDownload={[MockFunction]}
                                    >
                                      <div>
                                        <WithStyles(ForwardRef(IconButton))
                                          aria-label="app.cart_arialabel"
                                          className="tour-dataview-cart-icon"
                                          onClick={[MockFunction]}
                                          style={
                                            Object {
                                              "margin": "auto",
                                            }
                                          }
                                        >
                                          <ForwardRef(IconButton)
                                            aria-label="app.cart_arialabel"
                                            className="tour-dataview-cart-icon"
                                            classes={
                                              Object {
                                                "colorInherit": "MuiIconButton-colorInherit",
                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                "disabled": "Mui-disabled",
                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                "edgeStart": "MuiIconButton-edgeStart",
                                                "label": "MuiIconButton-label",
                                                "root": "MuiIconButton-root",
                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                              }
                                            }
                                            onClick={[MockFunction]}
                                            style={
                                              Object {
                                                "margin": "auto",
                                              }
                                            }
                                          >
                                            <WithStyles(ForwardRef(ButtonBase))
                                              aria-label="app.cart_arialabel"
                                              centerRipple={true}
                                              className="MuiIconButton-root tour-dataview-cart-icon"
                                              disabled={false}
                                              focusRipple={true}
                                              onClick={[MockFunction]}
                                              style={
                                                Object {
                                                  "margin": "auto",
                                                }
                                              }
                                            >
                                              <ForwardRef(ButtonBase)
                                                aria-label="app.cart_arialabel"
                                                centerRipple={true}
                                                className="MuiIconButton-root tour-dataview-cart-icon"
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "focusVisible": "Mui-focusVisible",
                                                    "root": "MuiButtonBase-root",
                                                  }
                                                }
                                                disabled={false}
                                                focusRipple={true}
                                                onClick={[MockFunction]}
                                                style={
                                                  Object {
                                                    "margin": "auto",
                                                  }
                                                }
                                              >
                                                <button
                                                  aria-label="app.cart_arialabel"
                                                  className="MuiButtonBase-root MuiIconButton-root tour-dataview-cart-icon"
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onClick={[MockFunction]}
                                                  onDragLeave={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseUp={[Function]}
                                                  onTouchEnd={[Function]}
                                                  onTouchMove={[Function]}
                                                  onTouchStart={[Function]}
                                                  style={
                                                    Object {
                                                      "margin": "auto",
                                                    }
                                                  }
                                                  tabIndex={0}
                                                  type="button"
                                                >
                                                  <span
                                                    className="MuiIconButton-label"
                                                  >
                                                    <WithStyles(ForwardRef(Badge))
                                                      badgeContent={null}
                                                      color="primary"
                                                    >
                                                      <ForwardRef(Badge)
                                                        badgeContent={null}
                                                        classes={
                                                          Object {
                                                            "anchorOriginBottomLeftCircle": "MuiBadge-anchorOriginBottomLeftCircle",
                                                            "anchorOriginBottomLeftRectangle": "MuiBadge-anchorOriginBottomLeftRectangle",
                                                            "anchorOriginBottomRightCircle": "MuiBadge-anchorOriginBottomRightCircle",
                                                            "anchorOriginBottomRightRectangle": "MuiBadge-anchorOriginBottomRightRectangle",
                                                            "anchorOriginTopLeftCircle": "MuiBadge-anchorOriginTopLeftCircle",
                                                            "anchorOriginTopLeftRectangle": "MuiBadge-anchorOriginTopLeftRectangle",
                                                            "anchorOriginTopRightCircle": "MuiBadge-anchorOriginTopRightCircle",
                                                            "anchorOriginTopRightRectangle": "MuiBadge-anchorOriginTopRightRectangle",
                                                            "badge": "MuiBadge-badge",
                                                            "colorError": "MuiBadge-colorError",
                                                            "colorPrimary": "MuiBadge-colorPrimary",
                                                            "colorSecondary": "MuiBadge-colorSecondary",
                                                            "dot": "MuiBadge-dot",
                                                            "invisible": "MuiBadge-invisible",
                                                            "root": "MuiBadge-root",
                                                          }
                                                        }
                                                        color="primary"
                                                      >
                                                        <span
                                                          className="MuiBadge-root"
                                                        >
                                                          <ForwardRef(ShoppingCartIcon)>
                                                            <WithStyles(ForwardRef(SvgIcon))>
                                                              <ForwardRef(SvgIcon)
                                                                classes={
                                                                  Object {
                                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                    "colorError": "MuiSvgIcon-colorError",
                                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                    "root": "MuiSvgIcon-root",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="MuiSvgIcon-root"
                                                                  focusable="false"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <path
                                                                    d="M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z"
                                                                  />
                                                                </svg>
                                                              </ForwardRef(SvgIcon)>
                                                            </WithStyles(ForwardRef(SvgIcon))>
                                                          </ForwardRef(ShoppingCartIcon)>
                                                          <span
                                                            className="MuiBadge-badge MuiBadge-anchorOriginTopRightRectangle MuiBadge-colorPrimary MuiBadge-invisible"
                                                          />
                                                        </span>
                                                      </ForwardRef(Badge)>
                                                    </WithStyles(ForwardRef(Badge))>
                                                  </span>
                                                  <WithStyles(memo)
                                                    center={true}
                                                  >
                                                    <ForwardRef(TouchRipple)
                                                      center={true}
                                                      classes={
                                                        Object {
                                                          "child": "MuiTouchRipple-child",
                                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                                          "ripple": "MuiTouchRipple-ripple",
                                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                          "root": "MuiTouchRipple-root",
                                                        }
                                                      }
                                                    >
                                                      <span
                                                        className="MuiTouchRipple-root"
                                                      >
                                                        <TransitionGroup
                                                          childFactory={[Function]}
                                                          component={null}
                                                          exit={true}
                                                        />
                                                      </span>
                                                    </ForwardRef(TouchRipple)>
                                                  </WithStyles(memo)>
                                                </button>
                                              </ForwardRef(ButtonBase)>
                                            </WithStyles(ForwardRef(ButtonBase))>
                                          </ForwardRef(IconButton)>
                                        </WithStyles(ForwardRef(IconButton))>
                                      </div>
                                    </ViewCartButton>
                                  </div>
                                </Styled(MuiBox)>
                              </WithStyles(Styled(MuiBox))>
                            </div>
                          </Styled(MuiBox)>
                        </WithStyles(Styled(MuiBox))>
                      </header>
                    </ForwardRef(Paper)>
                  </WithStyles(ForwardRef(Paper))>
                </ForwardRef(AppBar)>
              </WithStyles(ForwardRef(AppBar))>
              <TabPanel
                index="investigation"
                value="investigation"
              >
                <Styled(MuiBox)
                  aria-labelledby="simple-tab-investigation"
                  border={0}
                  component="div"
                  hidden={false}
                  id="simple-tabpanel-investigation"
                  role="tabpanel"
                >
                  <div
                    aria-labelledby="simple-tab-investigation"
                    className="MuiBox-root MuiBox-root-11"
                    hidden={false}
                    id="simple-tabpanel-investigation"
                    role="tabpanel"
                  >
                    <Styled(MuiBox)
                      p={3}
                    >
                      <div
                        className="MuiBox-root MuiBox-root-12"
                      >
                        <InvestigationCardView>
                          <div>
                            <mockConstructor
                              allIds={Array []}
                              buttons={
                                Array [
                                  [Function],
                                ]
                              }
                              customFilters={Array []}
                              data={Array []}
                              description={
                                Object {
                                  "dataKey": "summary",
                                  "disableSort": true,
                                  "label": "investigations.details.summary",
                                }
                              }
                              filters={Object {}}
                              information={
                                Array [
                                  Object {
                                    "content": [Function],
                                    "dataKey": "doi",
                                    "disableSort": true,
                                    "icon": Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    },
                                    "label": "investigations.doi",
                                  },
                                  Object {
                                    "dataKey": "visitId",
                                    "disableSort": true,
                                    "icon": Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    },
                                    "label": "investigations.visit_id",
                                  },
                                  Object {
                                    "dataKey": "name",
                                    "disableSort": true,
                                    "icon": Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    },
                                    "label": "investigations.details.name",
                                  },
                                  Object {
                                    "content": [Function],
                                    "dataKey": "datasetCount",
                                    "disableSort": true,
                                    "icon": Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    },
                                    "label": "investigations.dataset_count",
                                  },
                                  Object {
                                    "content": [Function],
                                    "dataKey": "investigationInstruments.instrument.name",
                                    "disableSort": true,
                                    "icon": Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    },
                                    "label": "investigations.instrument",
                                    "noTooltip": true,
                                  },
                                  Object {
                                    "content": [Function],
                                    "dataKey": "startDate",
                                    "disableSort": true,
                                    "icon": Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    },
                                    "label": "investigations.details.start_date",
                                  },
                                  Object {
                                    "content": [Function],
                                    "dataKey": "endDate",
                                    "disableSort": true,
                                    "icon": Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    },
                                    "label": "investigations.details.end_date",
                                  },
                                ]
                              }
                              loadedCount={true}
                              loadedData={true}
                              moreInformation={[Function]}
                              onFilter={[Function]}
                              onPageChange={[Function]}
                              onResultsChange={[Function]}
                              onSort={[Function]}
                              page={null}
                              results={null}
                              sort={Object {}}
                              title={
                                Object {
                                  "content": [Function],
                                  "dataKey": "title",
                                  "disableSort": true,
                                  "label": "investigations.title",
                                }
                              }
                              totalDataCount={0}
                            >
                              MockedCardView
                            </mockConstructor>
                          </div>
                        </InvestigationCardView>
                      </div>
                    </Styled(MuiBox)>
                  </div>
                </Styled(MuiBox)>
              </TabPanel>
            </div>
          </SearchPageCardView>
        </Connect(SearchPageCardView)>
      </QueryClientProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;
